# Configura o pipeline de CD para ser executado em push para a branch develop
name: CD Pipeline

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [21.x]

    steps:
      # Faz o checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configura o Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Limpa o cache e instala os pacotes
      - name: "Clear cache and install packages"
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install

      # Verifica a versão do Ubuntu para confirmar que o runner está ativo
      - name: Verificar versão do Ubuntu
        run: lsb_release -a

  sonarqube:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  fortify:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Fortify on Demand SAST & SCA Scan
        uses: fortify/github-action@v1
        with:
          sast-scan: true
          debricked-sca-scan: true
        env:
          FOD_URL: ${{secrets.FOD_URL}} // https://ams.fortify.com
          FOD_TENANT: ${{secrets.FOD_TENANT}}
          FOD_USER: ${{secrets.FOD_USER}}
          FOD_PASSWORD: ${{secrets.FOD_TOKEN}}

  generateimage:
    runs-on: self-hosted
    needs: build
    # needs: [sonarqube, fortify]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: "Docker login"
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Build Docker image"
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: |
            araujothiago-dev/nest_aws_mongodb:v1
            araujothiago-dev/nest_aws_mongodb:latest

  deploy:
    runs-on: self-hosted
    # needs: generateimage
    needs: build
    steps:
      # Faz o checkout do código
      - name: Checkout code
        uses: actions/checkout@v4

      # Usa a chave SSH para autenticação
      - name: Setup up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Testa a conexão SSH
      - name: Testar Conexão SSH
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.UBUNTU_USER }}@${{ secrets.UBUNTU_HOST }} "echo 'Conexão SSH bem-sucedida'"

      # Acessa o servidor Ubuntu e executa os comandos
      - name: Deploy no Servidor Ubuntu
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UBUNTU_HOST }}
          username: ${{ secrets.UBUNTU_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /srv/sistemas/nest_aws_mongodb-master &&
            git fetch &&
            git checkout develop &&
            git pull origin develop --rebase &&
            echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env &&
            echo "TZ=${{ secrets.TZ }}" >> .env &&
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env &&
            echo "MONGO_URI2=${{ secrets.MONGO_URI2 }}" >> .env &&
            echo "PORT=${{ secrets.PORT }}" >> .env &&
            echo "PATH_API=${{ secrets.PATH_API }}" >> .env &&
            echo "SYNCHRONIZE=${{ secrets.SYNCHRONIZE }}" >> .env &&
            echo "RUN_MIGRATIONS=${{ secrets.RUN_MIGRATIONS }}" >> .env &&
            echo "FROM node:21" > Dockerfile &&
            echo "WORKDIR ${{ secrets.PATH_API }}" >> Dockerfile &&
            echo "COPY package*.json ./" >> Dockerfile &&
            echo "RUN npm install --legacy-peer-deps" >> Dockerfile &&
            echo "COPY . ." >> Dockerfile &&
            # echo "RUN npm run build" >> Dockerfile &&
            echo "EXPOSE ${{ secrets.PORT }}" >> Dockerfile &&
            echo "CMD ["node", "dist/main"]" >> Dockerfile &&
            docker-compose up -d --build