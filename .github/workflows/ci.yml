# Configura o pipeline de CI para ser executado em push para a branch develop
name: CI Pipeline

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [21.x]

    steps:
      # Faz o checkout do repositÃ³rio
      - name: Checkout repository
        uses: actions/checkout@v2

      # Configura o Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Limpa o cache e instala os pacotes
      - name: "Clear cache and install packages"
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install

      # Instala os pacotes
      - name: "Install packages"
        run: npm install

      # Cria o arquivo .env
      - name: "Create .env"
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env &&
          echo "TZ=${{ secrets.TZ }}" >> .env &&
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env &&
          echo "MONGO_URI2=${{ secrets.MONGO_URI2 }}" >> .env &&
          echo "PORT=${{ secrets.PORT }}" >> .env &&
          echo "PATH_API=${{ secrets.PATH_API }}" >> .env &&
          echo "SYNCHRONIZE=${{ secrets.SYNCHRONIZE }}" >> .env &&
          echo "RUN_MIGRATIONS=${{ secrets.RUN_MIGRATIONS }}" >> .env

      # Configura o Dockerfile
      - name: "Set up Dockerfile"
        run: |
          echo "FROM node:21" > Dockerfile
          echo "WORKDIR ${{ secrets.PATH_API }}" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm install --legacy-peer-deps" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "RUN npm run build" >> Dockerfile
          echo "EXPOSE ${{ secrets.PORT }}" >> Dockerfile
          echo 'CMD ["node", "dist/main"]' >> Dockerfile

  sonarqube:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  dockerimage:
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

          # Login no Docker
      - name: "Docker login"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build e push da imagem Docker
      - name: "Build Docker image"
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            thiaguinhobyra/nest_aws_mongodb:v1
            thiaguinhobyra/nest_aws_mongodb:latest