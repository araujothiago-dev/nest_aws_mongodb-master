# Configura o pipeline de CD para ser executado em push para a branch develop
name: CD Pipeline

on:
  push:
    branches: [ develop ]

jobs:
  pipeline-cd:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      # Faz o checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Configura o Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: "Clear cache and install packages"
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install
        
      # Instala os pacotes
      # - name: "Install packages"
      #   run: npm install

      # Cria o arquivo .env
      - name: "Create .env"
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env &&
          echo "TZ=${{ secrets.TZ }}" >> .env &&
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env &&
          echo "MONGO_URI2=${{ secrets.MONGO_URI2 }}" >> .env &&
          echo "PORT=${{ secrets.PORT }}" >> .env &&
          echo "PATH_API=${{ secrets.PATH_API }}" >> .env &&
          echo "SYNCHRONIZE=${{ secrets.SYNCHRONIZE }}" >> .env &&
          echo "RUN_MIGRATIONS=${{ secrets.RUN_MIGRATIONS }}" >> .env

      - name: "Set up Dockerfile"
        run: |
          echo "FROM node:14" > Dockerfile
          echo "WORKDIR process.env.PATH_API" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm install" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "RUN npm run build" >> Dockerfile
          echo "EXPOSE process.env.PORT" >> Dockerfile
          echo "CMD ["node", "dist/main"]" >> Dockerfile

      # Verifica a versão do Ubuntu para confirmar que o runner está ativo
      - name: Verificar versão do Ubuntu
        run: lsb_release -a

      # Usa a chave SSH para autenticação
      - name: Setup up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Testar Conexão SSH
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.UBUNTU_USER }}@${{ secrets.UBUNTU_HOST }} "echo 'Conexão SSH bem-sucedida'"
            
      # Acessa o servidor Ubuntu e executa os comandos
      - name: Access Ubuntu and git pull
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UBUNTU_HOST }}
          username: ${{ secrets.UBUNTU_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /srv/sistemas/nest_aws_mongodb-master &&
            git fetch &&
            git checkout develop &&
            git pull origin develop --rebase &&
            docker-compose up -d --build